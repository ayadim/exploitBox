import re
import feedparser
import argparse

nbrOfResultPeerSearch = 30
listOfServers = {'db-exploit.com':25,'packetstormsecurity.com':13,'securityfocus.com':1,'securiteam.com':5,'seclists.org/bugtraq':26}

def getLinkFromPacketStormSecurity(searchFor):
    if searchFor :
        return "https://rss.packetstormsecurity.com/search/files/?q="+searchFor+"&s=files"
    else:
        return "https://rss.packetstormsecurity.com/search/files/?q=&s=files"

def getLinkFromJetlib(searchFor,nbrOfDbTarget):
    if nbrOfDbTarget in [1,5,25,26]:
        return "https://sec.jetlib.com/search.php?media=rss&rss_query="+searchFor+"&rss_query_match=or&rss_query_channel="+str(nbrOfDbTarget)+"&rss_order=date&rss_query_res_per_page="+str(nbrOfResultPeerSearch)+"&rss_query_current_page=0"

#get Final Link
def getFinalLink(searchFor,dbTargetNumber):
    if int(dbTargetNumber) ==13:
        return getLinkFromPacketStormSecurity(searchFor)#packetstormsecurity.com
    elif int(dbTargetNumber) in [1,5,25,26]:
        return getLinkFromJetlib(searchFor,dbTargetNumber)

def isCVEValid(cve):
    #check using regular expression if the CVE syntaxe is correct ex : CVE-2010-15665
    if re.findall(r"CVE\-\d\d\d\d\-\d{1,6}",cve.upper()):
        return True
    else:
        return False

def getFeedFromXXX(RSSlink):
    """
        get feed Using link provided as argument
    :param RSSlink:
    :return: return false if there's no result
            return true if every thing goes right
            return None if an error show up
    """
    summary =""
    link =""
    if "packetstormsecurity" in RSSlink:
        link ="link"
        summary="summary_detail"
    elif "jetlib" in RSSlink:
        link="id"
        summary="summary"
    myFeed=""
    try:
        myFeed = feedparser.parse(RSSlink)
    except:
        print("problem with the db website.try to change the source db in option !")
        return None
    entries = [item for item in myFeed.items() if "entries" in item]
    tupleInsideEntries =entries[0]
    #print len(tupleInsideEntries[1])#show the number of result founded
    for dicItem in tupleInsideEntries[1]:
        if dicItem.get("title")=="No Results Found":
            return False #break from this loop if theres no result
        print ("Title : "+dicItem.get("title"))#title
        if summary =="summary_detail": #packetstormsecurity
            print ("Description : "+str(dicItem.get(summary).get("value")))#description
        else:
            print ("Description : "+str(dicItem.get(summary)))
        print ("Date : "+dicItem.get("published"))#date
        print ("Link : "+dicItem.get(link)) #link
        print ("#################################################################################")
    return True

def menu():
    print("""
    Email : ayadi.mohamed@outlook.com
    Author : ayadi
    program name : exploitBox
    Program version : 1.0
    This program provides you with three type of online search :
    [1, Search for an exploit using a choosing server.]
    [2, Search for an exploit using CVE code.]
    [3, Search for a tool/backdoor/etc in packetstormsecurity.com server.] 
    
    servers List : db-exploit.com , packetstormsecurity.com ,  securiteam.com , seclists.org/bugtraq
    
    search exemples :  
    ./program --exploit 4images --server db-exploit.com
    ./program --cve CVE-2018-20434
    ./program --tool r57shell
#################################################################################
    """)
    parser = argparse.ArgumentParser()
    parser.add_argument("-c","--cve",help="./program --cve CVE-2018-20434 #must set the same syntax and ")
    parser.add_argument("-e","--exploit",help="./program --exploit [exploit to find] --server [server to look in]")
    parser.add_argument("-s","--server",choices=['db-exploit.com','packetstormsecurity.com','securiteam.com','seclists.org/bugtraq'],help="./program --exploit 4images --server db-exploit.com")
    parser.add_argument("-t","--tool",help="./program --tool r57shell #if you're looking for a script/tool")
    args = parser.parse_args()
    if args.exploit and args.server is None:
        parser.error("--exploit requires --server option")
        return False
    elif args.exploit and (args.tool or args.cve):
        parser.error("--exploit not requires --cve or --tool")
        return False
    elif args.cve and (args.tool or args.exploit or args.server):
        parser.error("--cve not requires --tool or --exploit or even --server")
        return False
    elif args.tool and ( args.cve or args.exploit or args.server):
        parser.error("--tool not requires --cve or --exploit or even --server")
        return False
    elif args.cve:
        if isCVEValid(args.cve) == False:
            parser.error("cve value is not correct ! [exemple of valid form : CVE-2010-15665]")
    return args

if __name__ == "__main__":
    userInput = menu()
    if userInput != False:
        if userInput.cve is not None:
            getFeedFromXXX(getLinkFromPacketStormSecurity(userInput.cve.upper()))
        elif userInput.exploit is not None and userInput.server is not None:
            getFeedFromXXX(getFinalLink(userInput.exploit,listOfServers.get(userInput.server)))
        elif userInput.tool is not None:
            getFeedFromXXX(getLinkFromPacketStormSecurity(userInput.tool))
    else:
        print("Some thing goes wrong try to set the correct syntax using the exemples provided in menu !")
